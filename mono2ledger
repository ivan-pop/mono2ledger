#!/usr/bin/env python3
import argparse
import configparser
import csv
import os
import re
from datetime import datetime

import requests
from pycountry import currencies

# TODO: StatementItem -> StatementEntry


# Datetime formed used in statement
STATEMENT_DATETIME_FORMAT = "%d.%m.%Y %H:%M:%S"
# Date format used by ledger
LEDGER_DATE_FORMAT = "%Y/%m/%d"
# Datetime format used in header
HEADER_DATETIME_FORMAT = "%Y/%m/%d %H:%M:%S"

INCOME_KEY = "income"
OUTCOME_KEY = "outcome"
PAYEE_KEY = "payee"

# Get config file from xdg config dir
config_file = os.path.join(
    os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config")),
    "mono2ledger/config.ini",
)

config = configparser.ConfigParser()
config.read(config_file)

cashback_account = config["DEFAULT"]["cashback_account"]
card_account = config["DEFAULT"]["card_account"]
ledger_file = os.path.expanduser(config["DEFAULT"]["ledger_file"])


def get_statement_item_config(item):
    """
    Return config data for provided statement item.
    Raise exception when there is none
    """
    for key in config:
        # Default key only holds settings, not interested in it
        if key == "DEFAULT":
            continue

        mcc = key.split("/")[0]
        regexp = "".join(key.split("/")[1:])

        if str(item.mcc) == mcc and re.match(regexp, item.description):
            return config[key]

    raise ValueError(
        f"There is no matching config for entry {item.mcc} {item.description}"
    )


class StatementItem:
    """
    This represents single row in statement.
    """

    def account_name(self):
        """
        Return account name associated with this item.
        """
        config = get_statement_item_config(self)
        return (
            config[INCOME_KEY]
            if self.currency_amount < 0
            else config[OUTCOME_KEY]
        )

    def payee(self):
        """
        Return payee associated with this item.
        """
        payee = get_statement_item_config(self).get(PAYEE_KEY)
        if payee is None:
            payee = "UNKNOWN"
            print(f"Unknown payee for entry {self.mcc} {self.description}")
        return payee

    def _check_fields(self):
        """
        Assert that not yet supported fields dont have unexpected values
        """
        assert self.currency_amount == self.operation_amount
        assert self.exchange_rate is None
        assert self.currency == "UAH"

    def to_ledger(self):
        """
        Return ledger representation of this entry.
        """
        account = self.account_name()
        payee = self.payee()
        date = self.datetime.strftime(LEDGER_DATE_FORMAT)

        ret = "".join(
            (
                f"{date} * {payee}\n",
                f"    {account:60} {self.currency_amount:8} {self.currency}\n",
                f"    {cashback_account:60} {self.cashback:8} {self.currency}\n"
                if self.cashback
                else "",
                f"    {card_account}\n",
            )
        )

        return ret

    def convert_from_csv(self, row):
        def get_col(pos):
            """Return value from column, None if column is empty."""
            col = row[pos]
            return col if col != "â€”" else None

        def float_or_none(val):
            """
            Return value converted to float if it is not None or None
            """
            return float(val) if val else None

        self.datetime = datetime.strptime(row[0], STATEMENT_DATETIME_FORMAT)
        self.description = get_col(1)
        self.mcc = get_col(2)
        self.currency_amount = float(get_col(3))
        self.operation_amount = float(get_col(4))
        self.currency = get_col(5)
        self.exchange_rate = float_or_none(get_col(6))
        self.commission = float_or_none(get_col(7))
        self.cashback = float_or_none(get_col(8))

    def convert_from_json(self, row):
        def amount_to_float(val):
            """
            monobank stores floats as ints with last two numbers being
            cents, convert it to float
            """
            return val / 100

        self.datetime = datetime.fromtimestamp(row["time"])
        self.description = row["description"]
        self.mcc = row["mcc"]
        self.currency_amount = amount_to_float(row["amount"])
        self.operation_amount = amount_to_float(row["operationAmount"])
        self.currency = currencies.get(
            numeric=str(row["currencyCode"])
        ).alpha_3
        # TODO: Figure out how to calculate this
        # self.exchange_rate = float(row['amount']) / float(row['operationAmount'])
        self.exchange_rate = None
        self.commision = amount_to_float(row["commissionRate"])
        self.cashback = amount_to_float(row["cashbackAmount"])

    def reverse_values(self):
        """
        Reverse symbol on numbers since we are dealing with
        double-entry in ledger.
        """
        self.currency_amount = -self.currency_amount
        self.operation_amount = -self.operation_amount

        if self.cashback:
            self.cashback = -self.cashback

    def __init__(self, row, as_json=False):
        if as_json:
            self.convert_from_json(row)
        else:
            self.convert_from_csv(row)
        self.reverse_values()
        self._check_fields()

    def __str__(self):
        return "{} | {:30} | {:4} | {:6} | {:6} | {:2} | {:2} | {:4} | {:4}".format(
            self.datetime,
            self.description,
            self.mcc,
            self.currency_amount,
            self.operation_amount,
            self.currency,
            self.exchange_rate or "-",
            self.commission or "-",
            self.cashback or "-",
        )


def get_last_transaction_date():
    """
    Return date of the last ledger transaction.
    """
    TRANSACTION_PATTERN = re.compile(r"\d{4}[/|-]\d{2}[/|-]\d{2}")

    with open(ledger_file) as file:
        for line in file.readlines():
            if match := TRANSACTION_PATTERN.findall(line):
                result = match[0]
        return datetime.strptime(result, "%Y/%m/%d")


def fetch_statement(api_key, from_time, to_time=datetime.now(), account="0"):
    """
    Fetch statement in json format.
    Account 0 just uses default account, I have no idea how to get
    account ids.
    """

    url = (
        "https://api.monobank.ua/personal/statement"
        f"/{account}"
        f"/{int(from_time.timestamp())}"
        f"/{int(to_time.timestamp())}"
    )
    result = requests.get(url, headers={"X-Token": api_key})

    if result.status_code != 200:
        raise ValueError(result.json())

    return result.json()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Convert monobank csv statement to ledger transactions.",
    )
    # TODO: I think there were more common keys for this, but i dont remember them atm
    parser.add_argument(
        "-n",
        "--no-edit",
        help="Do not edit ledger files, just print output as if they were",
        action="store_true",
    )
    parser.add_argument(
        "files",
        metavar="PATH",
        nargs="*",
        help="Path to monobank card statement.",
        type=argparse.FileType(),
    )

    args = parser.parse_args()
    dont_edit = args.no_edit

    header_datetime = datetime.now().strftime(HEADER_DATETIME_FORMAT)

    # Header and footer inserted before and after converter output
    header = (
        f"\n;; Begin converter output\n"
        f";; Date and time: {header_datetime}\n"
    )
    footer = ";; End converter output\n"

    if api_key := os.getenv("MONOBANK_API_KEY"):
        last_transaction_date = get_last_transaction_date()
        if (last_transaction_date - datetime.now()).days <= -31:
            err = (
                "monobank API does not support fetching statements "
                "from more that 31 days.\nUse non-api method instead."
            )
            print(err)
            exit(1)

        items = [
            StatementItem(entry, as_json=True).to_ledger()
            for entry in reversed(
                fetch_statement(api_key, last_transaction_date)
            )
        ]
        pass

    else:
        files = args.files
        if not files:
            print("When using non-api method you must provide files to parse.")
            exit(1)

        items = []
        for file in files:
            reader = csv.reader(file)
            next(reader)  # Skip field titles

            items.append(
                StatementItem(row).to_ledger()
                for row in reversed(list(reader))
            )

    if items and not dont_edit:
        with open(f"{ledger_file}", "a") as ledger:
            print(f"Writing entries to {ledger_file}")
            ledger.write(header)
            for item in items:
                ledger.write(item + "\n")
            ledger.write(footer)
